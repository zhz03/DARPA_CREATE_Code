[1mdiff --git a/E2Etest/SM_generator_1d.py b/E2Etest/SM_generator_1d.py[m
[1mindex a7fe679..1c8acde 100644[m
[1m--- a/E2Etest/SM_generator_1d.py[m
[1m+++ b/E2Etest/SM_generator_1d.py[m
[36m@@ -61,11 +61,7 @@[m [mdef inputs_generator_1d():[m
                     Rs.append(R)[m
                     Qs.append(Q)[m
 [m
[31m-    uts = [0,1][m
[31m-    ts = [100,1][m
[31m-    ut = [0,1][m
[31m-    trials = 1000[m
[31m-    T = 101[m
[32m+[m
     # Stack a set of ABHQR as system models  (SM)[m
     SM = [As,Hs,Bs,Qs,Rs][m
     return SM,T,uts,ts,ut[m
[1mdiff --git a/E2Etest/System_setup_generator.py b/E2Etest/System_setup_generator.py[m
[1mindex 950716c..8c156d6 100644[m
[1m--- a/E2Etest/System_setup_generator.py[m
[1m+++ b/E2Etest/System_setup_generator.py[m
[36m@@ -6,10 +6,13 @@[m [mCreated on Wed Sep  9 14:09:33 2020[m
 """[m
 [m
 def System_setup_generator():[m
[31m-    T = 100[m
[32m+[m[32m    T = 101[m
     uts = [0,1][m
     ts = [100,1][m
     ut = [0,1][m
     trials = 1000[m
[32m+[m
     return T,uts,ts,ut,trials[m
 [m
[32m+[m[32mif __name__ == '__main__':[m
[32m+[m[32m    T,uts,ts,ut,trials = System_setup_generator()[m
[1mdiff --git a/README.md b/README.md[m
[1mindex b18b37b..e060604 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -34,7 +34,7 @@[m [mBefore you execute any code in the subfolder, you'll need to run '*addpath.py*'[m
   - Compare the above two error probabilities and do comprehensive test across different parameters space. [m
 - **utility_functions**: this folder contains some utility functions that could help in data converting, plotting and visualization. [m
 [m
[31m-- **E2Etest_1d**: this folder only contains one program, which can do end-to-end calculation (inputs $A,B,H,Q,R,x0,ts,uts$, outputs $Prob_D,Prob_{FA},Prob_M,Prob_{CR}$) as well as end-to-end comprehensive validation and testing. [m
[32m+[m[32m- **E2Etest_1d**: this folder only contains four program, which can do end-to-end calculation (inputs $A,B,H,Q,R,x0,ts,uts$, outputs $Prob_D,Prob_{FA},Prob_M,Prob_{CR}$) as well as end-to-end comprehensive validation and testing. The **Sensor_planner** program can be directly integrated with other groups.[m[41m [m
 [m
 In each folder, there is another README.md to explain more details about each program. And in each program, there are comments and example functions to show how to use and run the code.[m
 [m
[1mdiff --git a/Sensor_Planner/__pycache__/Binary_hypothesis_testing_1d.cpython-37.pyc b/Sensor_Planner/__pycache__/Binary_hypothesis_testing_1d.cpython-37.pyc[m
[1mindex 5bde330..290007a 100644[m
Binary files a/Sensor_Planner/__pycache__/Binary_hypothesis_testing_1d.cpython-37.pyc and b/Sensor_Planner/__pycache__/Binary_hypothesis_testing_1d.cpython-37.pyc differ
[1mdiff --git a/binary_HT_nd/GD_nd.py b/binary_HT_nd/GD_nd.py[m
[1mindex 57efafe..1988a96 100644[m
[1m--- a/binary_HT_nd/GD_nd.py[m
[1m+++ b/binary_HT_nd/GD_nd.py[m
[36m@@ -5,22 +5,40 @@[m [mCreated on Mon Aug 24 22:49:51 2020[m
 @author: Zhaoliang[m
 """[m
 import numpy as np[m
[32m+[m[32mfrom scipy.linalg import eigh[m
 from scipy.stats import norm, multivariate_normal[m
 import utility_functions.plot_figures as plotfgs[m
 import utility_functions.convert_data as cnvdata[m
 import matplotlib.pyplot as plt[m
 [m
 def HT_2d(mean0,mean1,Sigma0,Sigma1):[m
[31m-    plotfgs.plot_multi_var(mean1,mean0,Sigma1,Sigma0)    [m
[32m+[m[32m    plotfgs.plot_multi_var(mean1,mean0,Sigma1,Sigma0)[m
[32m+[m[32m    diag_Sigma0 = np.diag(Sigma0)[m
[32m+[m[32m    diag_Sigma1 = np.diag(Sigma1)[m
[32m+[m[32m    #if np.sum(diag_Sigma0) > np.sum(diag_Sigma1):[m
[32m+[m[41m        [m
[32m+[m[41m        [m
 [m
 if __name__ == "__main__":[m
[32m+[m[32m    mean0 = np.array([0,0]).reshape(2,1)[m
[32m+[m[32m    mean1 = np.array([1,1]).reshape(2,1)[m
[32m+[m[32m    Sigma0 = np.array([[2,-1],[-1,2]]).reshape(2, 2)[m
[32m+[m[32m    Sigma1 = np.array([[3,0.1],[0.1,3]]).reshape(2, 2)[m
[32m+[m[32m    HT_2d(mean0,mean1,Sigma0,Sigma1)[m
     [m
[32m+[m[32m    x = np.array([4.3,0]).reshape(2,1)[m
[32m+[m[32m    xmu = x - mean0[m
[32m+[m[32m    d_sq = np.dot(np.dot(xmu.T,np.linalg.inv(Sigma0)),xmu)[m
[32m+[m[32m    d = np.sqrt(d_sq)[m
[32m+[m[32m    """[m
     mean0 = [0,0][m
     mean1 = [1,1][m
     Sigma0 = np.array([[2,-0.4],[-0.4,2]]).reshape(2, 2)[m
     Sigma1 = np.array([[.2,0.1],[0.1,.2]]).reshape(2, 2)[m
     plotfgs.plot_multi_var(mean1,mean0,Sigma1,Sigma0)[m
     [m
[32m+[m[32m    evals, evecs = eigh(Sigma0)[m
[32m+[m[32m    C = np.dot(evecs, np.diag(np.sqrt(evals)))[m
 [m
     xrange = np.arange(-1.5, 2.5, 0.01)[m
     yrange = np.arange(-1.5, 2.5, 0.01)[m
[36m@@ -56,4 +74,5 @@[m [mif __name__ == "__main__":[m
     Prob_M = 1 - Prob_D[m
     Prob_CR = 1 - Prob_FA[m
     [m
[31m-    plt.plot(intersectx,intersecty,'r.')[m
\ No newline at end of file[m
[32m+[m[32m    plt.plot(intersectx,intersecty,'r.')[m
[32m+[m[32m    """[m
\ No newline at end of file[m
[1mdiff --git a/utility_functions/CompP2SHist.py b/utility_functions/CompP2SHist.py[m
[1mindex 427254c..4e7a322 100644[m
[1m--- a/utility_functions/CompP2SHist.py[m
[1m+++ b/utility_functions/CompP2SHist.py[m
[36m@@ -16,7 +16,7 @@[m [mclass Compare_pln2statis_hist(object):[m
     def __init__(self, mean_pln = None, Sigma_pln = None,name = 'plan'):[m
         if(mean_pln is None or Sigma_pln is None):[m
             raise ValueError("Set proper statistics.")[m
[31m-       [m
[32m+[m[41m        [m
         self.mean_Pln =  mean_pln[m
         self.Sigma_Pln = Sigma_pln[m
         self.name = name[m
[1mdiff --git a/utility_functions/README.md b/utility_functions/README.md[m
[1mindex 67edb09..b5ee5a3 100644[m
[1m--- a/utility_functions/README.md[m
[1m+++ b/utility_functions/README.md[m
[36m@@ -1,5 +1,7 @@[m
 This folder is for utility programs:[m
 [m
 - CompP2SHist: to compare the planning mean and variance with the mean and variance of statistical data.[m
[31m-- [m
[32m+[m[32m- convert_data: to convert 1d or nd data into a format we want[m
[32m+[m[32m- plot_figures: to visualize data[m[41m [m
[32m+[m[32m- statis: this function is cited from Roger R Labbe Jr.'s repository[m[41m [m
 [m
